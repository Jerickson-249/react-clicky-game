{"version":3,"sources":["components/Title/index.js","components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","score","highscore","Card","src","image","onClick","id","Wrapper","children","App","state","clickedCards","characters","clickEvent","clickedImage","setState","map","character","clicked","Math","max","clickedCardsCopy","push","gameWin","gameOver","gameReset","shuffleStarwars","length","alert","shuffleImages","arr","sort","a","b","floor","random","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ykEAeeA,G,YAZD,SAAAC,GACd,OAAO,yBAAKC,UAAU,UACtB,yBAAKA,UAAU,SACf,4CAGA,yBAAKA,UAAU,UAAf,WACSD,EAAME,MADf,eACkCF,EAAMG,cCOzBC,G,MAdF,SAACJ,GACV,OACI,yBAAKC,UAAU,QACf,yBAAKA,UAAU,mBACX,yBACAI,IAAKL,EAAMM,MACXC,QAAS,kBAAIP,EAAMO,QAAQP,EAAMQ,W,OCH9BC,MAJf,SAAiBT,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,WC0F5BC,E,4MArFbC,MAAM,CACJV,MAAO,EACPC,UAAW,EACXU,aAAc,GACdC,WAAYA,G,EAIhBC,WAAW,SAACP,GACV,EAAKQ,aAAaR,I,EAGpBQ,aAAa,SAACR,GACZ,EAAKS,SAAS,CACZH,WAAWA,EAAWI,KAAI,SAAAC,GACxB,GAAGA,EAAUX,KAAOA,IAA4B,IAAtBW,EAAUC,QAAmB,CACrDD,EAAUC,SAAQ,EAClB,EAAKH,SAAS,CACZf,MAAM,EAAKU,MAAMV,MAAM,EACvBC,UAAUkB,KAAKC,IAAI,EAAKV,MAAMV,MAAM,EAAG,EAAKU,MAAMT,aAEpD,IAAMoB,EAAiB,EAAKX,MAAMC,aAClCU,EAAiBC,KAAKL,EAAUX,IAChC,EAAKS,SAAS,CAACJ,aAAaU,IAC5B,EAAKE,eAECN,EAAUX,KAAOA,IAA4B,IAAtBW,EAAUC,UACvC,EAAKM,WACL,EAAKC,kBAIZ,EAAKC,mB,EAGND,UAAU,WACR,EAAKV,SAAS,CACZf,MAAO,EACPW,aAAc,GACdC,WAAWA,EAAWI,KAAI,SAAAC,GACxBA,EAAUC,SAAQ,Q,EAKxBK,QAAQ,WACF,EAAKb,MAAME,WAAWe,SAAW,EAAKjB,MAAMC,aAAagB,SAC3DC,MAAM,YACN,EAAKH,c,EAITD,SAAS,WACPI,MAAM,aACN,EAAKH,a,EAGPC,gBAAgB,SAACpB,GACf,EAAKS,SAAS,CAACH,WAAW,EAAKiB,cAAc,EAAKnB,MAAME,e,EAG1DiB,cAAc,SAACC,GACb,OAAOA,EAAIC,MAAK,SAACC,EAAEC,GAAH,OAAOd,KAAKe,MAAoB,IAAdf,KAAKgB,UAAe,IAAI,GAAG,M,uDAIpD,IAAD,OACN,OACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAOnC,MAAOoC,KAAK1B,MAAMV,MAAOC,UAAWmC,KAAK1B,MAAMT,YACrDW,EAAWI,KACV,SAAAJ,GAAU,OACR,kBAAC,EAAD,CACAN,GAAIM,EAAWN,GACf+B,IAAKzB,EAAWN,GAChBF,MAAOQ,EAAWR,MAClBC,QAAS,EAAKQ,qB,GA7ENyB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5219b21.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Title = props => { //you have the variable Title is equal to the props (function) needs arrow functions\r\nreturn <div className=\"header\">\r\n<div className=\"title\">\r\n<h3>Clicky Game</h3> \r\n</div>\r\n\r\n<div className=\"scores\">\r\nscores: {props.score} highscore: {props.highscore}\r\n</div>\r\n</div>\r\n}\r\n//you wrap the p tag into the div called Title into another div called hHeader. You have a function called Title which is returning the HTML code.\r\nexport default Title;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className=\"card\">\r\n        <div className=\"image-container\">\r\n            <img\r\n            src={props.image}\r\n            onClick={()=>props.onClick(props.id)}\r\n            />\r\n        </div>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Wrapper(props){\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React, {Component} from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport Card from './components/Card';\nimport characters from '../src/characters.json';\nimport Wrapper from './components/Wrapper';\n\nclass App extends Component{\n  state={ \n    score: 0,\n    highscore: 0,\n    clickedCards: [],\n    characters: characters,\n//score is 0 because we defined it as 0, will get updated value from this.state.score\n  }\n\nclickEvent=(id) =>{\n  this.clickedImage(id);\n}\n\nclickedImage=(id) =>{\n  this.setState({\n    characters:characters.map(character =>{\n      if(character.id === id && character.clicked === false) {\n        character.clicked=true; //updating it to true, if we click on it twice, the game is lost\n        this.setState({\n          score:this.state.score+1,\n          highscore:Math.max(this.state.score+1, this.state.highscore) //comparing which one is bigger, that will be the highscore\n        })\n        const clickedCardsCopy=this.state.clickedCards;\n        clickedCardsCopy.push(character.id) //pushing the id of the character into the array\n        this.setState({clickedCards:clickedCardsCopy}) //clickedCards is an array, making sure they are equal\n        this.gameWin();\n      }\n      else if(character.id === id && character.clicked === true) {\n        this.gameOver();\n        this.gameReset();\n      }\n    }) \n  })\n this.shuffleStarwars();\n}\n\ngameReset=() =>{\n  this.setState({\n    score: 0,\n    clickedCards: [],\n    characters:characters.map(character=>{\n      character.clicked=false;\n    })\n  })\n}\n\ngameWin=() =>{\n  if (this.state.characters.length === this.state.clickedCards.length) {\n    alert(\"You Win!\");\n    this.gameReset();\n  }\n}\n\ngameOver=() =>{\n  alert(\"You LOST!\");\n  this.gameReset();\n}\n\nshuffleStarwars=(id) =>{\n  this.setState({characters:this.shuffleImages(this.state.characters)}) //whatever order the images or clicking, they are shuffling\n}\n \nshuffleImages=(arr) =>{\n  return arr.sort((a,b)=>Math.floor(Math.random()*1000)>500?1:-1);\n\n}\n\n  render(){\n    return(\n      <Wrapper>\n      <Title score={this.state.score} highscore={this.state.highscore}></Title>\n      {characters.map(\n        characters =>(\n          <Card \n          id={characters.id}\n          key={characters.id}\n          image={characters.image}\n          onClick={this.clickEvent}\n          />\n        )\n      )}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}